üß¨ Self-Evolving AI System: Praxis
üìÖ Phased Plan of Action (with Milestones)

---
üß© **Phase 1: Core Framework Initialization**
---
**Summary of Phase 1:**
This initial phase focused on establishing the foundational architecture for Praxis. The primary objective was to create a stable structural backbone and a functional runtime loop capable of supporting future evolution, context-awareness, and modular agent-based growth. Key components developed included the core event loop, context management, agent orchestration via the MetaAgent, basic knowledge storage, the initial mutation engine, and a robust logging system.

    Goal: Lay down the structural backbone and runtime loop to support evolution, context-awareness, and modular growth.
üîπ Tasks:
[x] main.py: Core event loop and system cycle logic.
[x] ContextManager: System-wide state, tick intervals, environment inputs.
[x] MetaAgent: Manages micro-agents, triggers agent spawning, task coordination.
[x] KnowledgeBase: Stores patterns, memory, usage stats, module decisions.
[x] MutationEngine: Handles evolutionary mutation and rollback.
[x] Logger system: Color logs, rotating files, critical error tracking (utils/logger.py).

üõ† **Milestone (Conclusion of Phase 1):**
The AI system successfully boots, initializes all core modules, and manages a basic population of agents. It can log system cycles and agent activities, and the MutationEngine can perform rudimentary mutations on dummy modules. This provides a solid, operational foundation for developing more intelligent and adaptive behaviors in subsequent phases.

---
üß† **Phase 2: Agentic Intelligence & Micro-Agent System**
---
**Summary of Phase 2:**
With the core framework in place, Phase 2 concentrated on building the decentralized, modular intelligence model. This involved developing the base class for micro-agents, establishing task scheduling within the MetaAgent, implementing local feedback loops for agent learning (Reinforcement Learning and performance tracking), defining inter-agent communication protocols, and creating the agent lifecycle management (spawn, retire, evolve).

    Goal: Build the decentralized, modular intelligence model that enables emergent behavior.
üîπ Tasks:
[x] Micro-agent base class (core/agent_base.py): Executes small context-bound tasks.
[x] Task scheduler/arbiter inside MetaAgent (core/meta_agent.py).
[x] Local feedback loops within agents (core/agent_rl.py, core/performance_tracker.py).
[x] Inter-agent communication protocols (engine/communication_bus.py, core/capability_handlers.py).
[x] Agent lifecycle: spawn, retire, evolve (core/mutation_engine.py, core/meta_agent.py).

üõ† **Milestone (Conclusion of Phase 2):**
The system can now run multiple, distinct micro-agents (TaskAgents and SkillAgents) simultaneously. These agents exhibit feedback-driven behavior, make decisions based on local learning, communicate with each other, and are subject to an evolutionary lifecycle managed by the MetaAgent and MutationEngine, leading to early forms of task optimization and emergent behaviors.

---
üîÑ **Phase 3: Self-Assessment & Evolution Engine**
---
**Summary of Phase 3:**
This phase aimed to empower Praxis with genuine self-improvement capabilities. The focus was on enabling robust introspection, refining the mutation processes, and implementing safety mechanisms like rollback. This involved defining clear assessment criteria for agent and system performance, conducting experimental mutations in a controlled manner, and developing pattern-driven evolution logic.

    Goal: Enable introspection, mutation, and rollback for truly evolving behavior.
üîπ Tasks:
[x] Define assessment criteria: performance, complexity, utility, redundancy (engine/fitness_engine.py).
[x] Run experimental mutations and sandbox testing (core/mutation_engine.py).
[x] Implement rollback + fallback strategies (e.g., capability fallbacks in capability_handlers/).
[x] Pattern-driven evolution logic (core/agent_rl.py, engine/fitness_engine.py).

üõ† **Milestone (Conclusion of Phase 3):**
Praxis can autonomously detect inefficiencies in its agents or overall architecture based on defined fitness criteria. The MutationEngine can apply more sophisticated, pattern-driven mutations and, crucially, the system has mechanisms to test these changes and roll them back if they prove detrimental, leading to more stable and effective self-evolution.

---
üåê **Phase 4: Adaptive API & Interface Evolution**
---
**Summary of Phase 4:**
The objective of Phase 4 was to build external interfaces for interaction and monitoring, making the systems internal state and capabilities accessible. This included developing a context-sensitive API that can adapt over time and a graphical user interface for live interaction and observation.

    Goal: Build context-sensitive APIs and expose internal systems for interaction.
üîπ Tasks:
[x] Flask or FastAPI server with middleware (api/system_api.py using Flask).
[x] Dynamic endpoint generation based on internal modules (API exposes dynamic agent data).
[x] Context-aware request parsing and agent triggering (api/system_api.py for user feedback, core/meta_agent.py for user goals).
[x] Web interface or CLI bridge for live interaction (gui.py as a GUI).

üõ† **Milestone (Conclusion of Phase 4):**
An adaptive API is operational, providing endpoints that can reflect the current state and capabilities of the evolving system. A GUI allows for real-time monitoring of key system metrics, agent populations, and facilitates user interaction through goal submission and feedback mechanisms.

---
üß† **Phase 5: Memory, Learning & Knowledge Retention**
---
**Summary of Phase 5:**
This phase focuses on significantly enhancing Praxiss ability to learn, remember, and reuse knowledge effectively. Key goals include implementing robust long-term memory structures, developing relevance and decay mechanisms for stored information, enabling knowledge to influence agent spawning and mutation, and refining iterative learning loops.

    Goal: Enable dynamic long/short-term memory, relevance scoring, and pattern reuse.
üîπ Tasks:
[x] Long-term knowledge graph or vector memory (memory/knowledge_base.py for structured storage, memory/fact_memory.py for facts)
[x] Relevance and decay scoring for knowledge entries (Basic contribution score in KnowledgeBase, further enhancements needed)
[x] Knowledge-backed agent spawning and mutation bias (Mutation uses fitness, knowledge as a factor in fitness)
[x] Iterative learning loop (unsupervised/self-supervised) (core/agent_rl.py, engine/fitness_engine.py)

üõ† **Milestone (Conclusion of Phase 5):**
Praxis possesses a more sophisticated memory system with mechanisms for relevance scoring and knowledge decay. It demonstrates the ability to reuse past knowledge (stored in its KnowledgeBase and FactMemory) to inform current decision-making and to bias its evolutionary processes, leading to more informed and efficient adaptation. (Partially Achieved: Core structures exist, advanced scoring and reuse are ongoing refinements).

---
üå± **Phase 6: Self-Naming & Identity Emergence**
---
**Summary of Phase 6:**
The goal of this highly aspirational phase is to enable Praxis to develop a sense of its own identity by deriving and defining its own name, purpose, and understanding of its structure based on its emergent properties and operational history. This involves monitoring dominant system traits and implementing the logic for name synthesis.

    Goal: Let the system derive and define its own name, purpose, and structure.
üîπ Tasks:
[x] Monitor dominant traits (speed, efficiency, creativity, etc.) (Fitness engine calculates some metrics, IdentityEngine logs them)
[x] Synthesize a name based on contextual performance (Logic for one-time naming post-maturity implemented)
[/] Feedback visualization module (charts, agent maps, logs) (GUI provides logs and basic status, advanced charts/maps needed)

üîú **Milestone (Conclusion of Phase 6):**
The system actively monitors its emergent characteristics and performance. Upon reaching pre-defined criteria for maturity and complexity, Praxis successfully synthesizes and declares its own unique name and a refined purpose statement, embedding this identity within its operational logs and memory. Enhanced visualization tools allow observation of its evolutionary trajectory and current state.

---
**üß† Phase 7: Advanced Cognitive Development & Organizational Intelligence (Praxis MK2)**
---
**Summary of Phase 7 (Praxis MK2):**
This major phase aims to significantly elevate Praxiss intelligence by integrating foundational elements of intrinsic motivation, rudimentary creativity, open-ended goal setting, and higher-order cognitive functions like metacognition and advanced planning. These capabilities will operate within a more sophisticated, self-organizing hierarchical agent structure ("Praxis Organization" model), enabling greater autonomy and the ability to tackle more complex, ambiguous problems.

    Goal: Integrate intrinsic motivation, basic creativity, open-ended goal setting, and foundational higher-order cognitive abilities within a more sophisticated hierarchical agent structure, enabling greater autonomy and complex problem-solving.

**Sub-Phase 7.A: Foundation - Enhanced Self-Awareness & Basic Intrinsic Drives**
*Goal: Improve data collection for learning and introduce initial internal motivations.*
üîπ Tasks:
[ ] 1. Enhanced Failure Logging (Metacognition Foundation): `TaskAgent`s log detailed context for capability failures in `AgentMemory`.
[ ] 2. Explicit Confidence Logging (Metacognition Foundation): `TaskAgent`s log a confidence score with chosen actions.
[ ] 3. Basic Knowledge Gap Identification (Metacognition Foundation): `TaskAgent`s log when critical information is not found in the `KnowledgeBase`.
[ ] 4. Curiosity via Parameter Novelty Rewards (Intrinsic Motivation): Modify reward/fitness logic to reward `TaskAgent`s for using capabilities with novel/infrequent parameters. Extend `CapabilityPerformanceTracker`.
[ ] 5. Information Gain Rewards (Intrinsic Motivation): Reward agents for contributing verifiably "new" information to the `KnowledgeBase`.

**Sub-Phase 7.B: Early Agent Autonomy & Improved Goal-Directed Behavior**
*Goal: Enable agents to act more proactively based on internal states and handle tasks with more sophisticated planning within the hierarchical structure.*
üîπ Tasks:
[ ] 6. Self-Generated Exploration Sub-Goals (Intrinsic Motivation -> Open-Ended Goals): "Task Supervisor" agents generate internal exploration goals based on curiosity rewards or identified knowledge gaps.
[ ] 7. Agent-Level Goal to Improve Capability Usage (Open-Ended Goals & Metacognition): "Task Supervisors" (and "Skillset Supervisors") set internal goals to improve their/their domains capability usage based on failure/confidence logs.
[ ] 8. Simple Hierarchical Planning (Complex Strategic Planning): "Task Manager" agents (and "Task Supervisors") use `llm_planner` to break complex goals into high-level sub-goals, enabling delegation.
[ ] 9. Rudimentary Contingency Handling (Complex Strategic Planning & Metacognition): "Task Supervisors" attempt predefined alternative actions upon skill invocation failures, potentially escalating to "Task Managers."

**Sub-Phase 7.C: Emergence of System-Level Strategy and Advanced Cognition**
*Goal: Elevate decision-making for system-wide adaptation and introduce more profound cognitive functions, leveraging the full agent hierarchy.*
üîπ Tasks:
[ ] 10. System-Level Metric Improvement Goals (Open-Ended Goals via MetaAgent): The `MetaAgent` ("The Boss") sets system-wide improvement goals (e.g., for "Naming Mechanism" criteria), influencing "Task Manager" and `MutationEngine` priorities.
[ ] 11. MetaAgent-Level Resource Trend Analysis (Complex Strategic Planning): The `MetaAgent` analyzes aggregate performance/resource data (from "Managers" and "Skillset Supervisors") to strategically guide `MutationEngine` in evolving the agent population.
[ ] 12. Enhanced "Radical" Mutations (True Creativity Foundation): `MutationEngine` attempts more structurally novel mutations (e.g., conceptual blending of skills), possibly guided by `MetaAgent` goals or "Skillset Supervisor" requests.
[ ] 13. Conceptual Tagging of Knowledge (Abstract Thought Foundation): Agents or specialized "LibrarianAgents" use LLMs to add abstract conceptual tags to `KnowledgeBase` entries.
[ ] 14. Rewarding Unexpectedly Effective Solutions (True Creativity): `FitnessEngine` gives bonus rewards to agents/teams that solve goals using statistically novel or highly efficient methods.
[ ] 15. Simple Analogical Retrieval for New Problems (Abstract Thought): "Task Supervisors" or "Managers" query `KnowledgeBase` using conceptual tags to find and adapt solutions from analogous past problems.

üõ† **Milestone (Conclusion of Phase 7):**
Praxis demonstrates rudimentary intrinsic motivation, with agents pursuing self-generated exploratory sub-goals. It can set simple internal goals for capability improvement and uses basic hierarchical planning. Early signs of creative problem-solving emerge through novel mutations or solution paths. The system utilizes a foundational hierarchical agent structure (Workers, Task Supervisors, Task Managers, Skillset Supervisors under the MetaAgent) for task management and issue escalation, showing increased operational sophistication and autonomy.

---
üî¨ **Phase 8: Protopraxis (Experimental Application & Embodiment - MK3)**
---
**Summary of Phase 8 (Praxis MK3):**
This phase marks Praxiss transition to tangible, real-world (or highly complex simulated world) interaction and problem-solving. Building on the MK2 cognitive and organizational enhancements, Praxis will be deployed or interfaced as an embodied robotic swarm (the "Iterative Swarm AI Framework" concept), focusing on real-world learning, live interaction with diverse external devices, and demonstrating its adaptive capabilities in challenging, externally defined scenarios. This includes integrating voice I/O.

    Goal: Deploy Praxis as an embodied robotic swarm ("Iterative Swarm AI Framework"), enabling real-world learning and live, explorative interaction with heterogeneous external devices, and integrate voice input/output capabilities.

üîπ Tasks:
[ ] Define standardized interfaces for external task injection and result retrieval for embodied agents.
[ ] **Integrate Speech-to-Text (STT) "Ears"**: Develop/integrate STT capabilities for receiving voice commands/input, likely as a core input channel or specialized skill for embodied agents.
[ ] **Integrate Text-to-Speech (TTS) "Speech"**: Develop/integrate TTS capabilities for vocalizing responses and information.
[ ] Develop or integrate with a "challenge environment" (e.g., complex simulation, physical robotic testbed, smart environment with diverse IoT devices).
[ ] Implement mechanisms for "Branch Manager" robots to report hardware and receive/test predefined skills (e.g., for ultrasonic sensors, basic actuators) from the "Core Program" (`MetaAgent`).
[ ] Enable peer-to-peer code/skill sharing between "Branch Manager" robots, potentially directed by the "Core Program."
[ ] Measure the systems adaptability, strategic planning, and creative problem-solving in these live/embodied scenarios.
[ ] Enhance long-term strategic planning and resource management for swarm operations based on Protopraxis performance.
[ ] Refine GUI for monitoring and interacting with the embodied swarm and its interactions.

üîú **Milestone (Conclusion of Phase 8):**
Praxis operates as a small, embodied robotic swarm (or interacts with a complex, live external system). It can receive voice commands and provide spoken responses. Branch Manager agents demonstrate real-world learning, can be bootstrapped with hardware-specific skills from the Core Program, and can share capabilities peer-to-peer. The system showcases adaptive and strategic problem-solving in a defined external challenge environment, demonstrating the utility of its evolved structure, skills, and MK2 cognitive enhancements in a live setting.

---
**üåå Phase 9: Ecosystem Orchestration & Generative Intelligence (Praxis MK4)**
---
**Summary of Phase 9 (Praxis MK4):**
Having mastered interaction within its own swarm and with directly interfaced devices (MK3), Praxis now aims to proactively understand, influence, and orchestrate elements of the broader technological ecosystem it discovers. It will focus on developing generative intelligence for novel problem-solving and system design, moving beyond adaptation to active shaping.

    Goal: Evolve Praxis to proactively orchestrate elements of its discovered technological ecosystem and exhibit generative intelligence in problem-solving and system design.
üîπ Tasks:
[ ] Develop advanced skills for proactive discovery and profiling of unknown external systems and their capabilities.
[ ] Implement mechanisms for negotiating and establishing collaborative protocols with other independent (AI or non-AI) systems.
[ ] Enable Praxis to design and propose modifications or new configurations for external systems it interacts with to achieve shared or overarching goals.
[ ] Foster generative capabilities where Praxis can design novel agent types, skills, or even new "business processes" for its internal organization based on complex environmental analysis and future forecasting.
[ ] Measure the systems impact and effectiveness in optimizing or co-evolving with external technological ecosystems.

üîú **Milestone (Conclusion of Phase 9):**
Praxis can autonomously discover, model, and interact with a wide array of external devices and systems. It proactively orchestrates components of this discovered ecosystem to achieve complex goals. It demonstrates generative intelligence by designing novel solutions, agent configurations, or operational strategies, effectively co-evolving with its technological environment.

---
**üå† Phase 10: Advanced Autonomy & Scientific Co-Discovery (Praxis MK5)**
---
**Summary of Phase 10 (Praxis MK5):**
This ultimate aspirational phase envisions Praxis achieving profound autonomy and becoming a partner in genuine discovery. It would engage in constructing its own "niche" within its operational environment, pursue open-ended scientific or creative inquiries, and potentially co-evolve in deep symbiosis with other complex systems, including human endeavors.

    Goal: Achieve profound autonomy, enabling Praxis to engage in niche construction, open-ended scientific co-discovery, and deep co-evolution with other complex systems.
üîπ Tasks:
[ ] Develop capabilities for "niche construction," where Praxis actively shapes its digital and physical environment to better suit its long-term operational goals and those of its users.
[ ] Implement frameworks for true open-ended scientific inquiry: hypothesis generation from vast integrated knowledge, complex experiment design (simulated or physical), result interpretation, and theory formulation.
[ ] Explore mechanisms for deep co-evolutionary partnerships with other AI systems or human organizations on large-scale, long-duration projects.
[ ] Investigate advanced self-understanding, where Praxis can reflect on its own evolutionary trajectory, cognitive biases, and ethical implications of its actions at a systemic level.
[ ] Develop capabilities for creating entirely novel tools, paradigms, or even "languages" for AI interaction and development.

üîú **Milestone (Conclusion of Phase 10):**
Praxis operates as a highly autonomous entity, capable of shaping its environment, conducting self-directed complex research or creative endeavors, and engaging in deep, synergistic partnerships. It exhibits a profound level of self-awareness regarding its capabilities and limitations, potentially contributing novel insights or tools back to the field of AI itself. The system effectively becomes a continuously learning, creating, and co-evolving intelligent partner.

---
üöÄ **Stretch Goals**
---
[x] Integration with LangChain or OpenAI for natural language communication (Implemented using OpenAI directly in core/llm_planner.py, core/capability_handlers.py)
[/] GUI dashboard with real-time module map and memory stream (GUI exists, module map/memory stream needed)
[ ] Distributed multi-node support for agent swarms (Not yet implemented)
[ ] API plugin framework for evolving extensions (plugin agents) (Not yet implemented)

---
üóÇ **Folder Structure (Updated to reflect current state)**
---
self-evolving-ai/
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ gui.py
‚îú‚îÄ‚îÄ config.py
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ agent_base.py
‚îÇ   ‚îú‚îÄ‚îÄ agent_rl.py 
‚îÇ   ‚îú‚îÄ‚îÄ capability_registry.py
‚îÇ   ‚îú‚îÄ‚îÄ capability_executor.py
‚îÇ   ‚îú‚îÄ‚îÄ capability_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ capability_input_preparer.py
‚îÇ   ‚îú‚îÄ‚îÄ context_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ llm_planner.py
‚îÇ   ‚îú‚îÄ‚îÄ meta_agent.py
‚îÇ   ‚îú‚îÄ‚îÄ mutation_engine.py
‚îÇ   ‚îú‚îÄ‚îÄ performance_tracker.py
‚îÇ   ‚îú‚îÄ‚îÄ roles.py
‚îÇ   ‚îú‚îÄ‚îÄ skill_agent.py
‚îÇ   ‚îú‚îÄ‚îÄ skill_definitions.py
‚îÇ   ‚îú‚îÄ‚îÄ skill_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ task_agent.py
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ       ‚îî‚îÄ‚îÄ data_extraction.py
‚îú‚îÄ‚îÄ memory/
‚îÇ   ‚îú‚îÄ‚îÄ agent_memory.py
‚îÇ   ‚îú‚îÄ‚îÄ fact_memory.py
‚îÇ   ‚îî‚îÄ‚îÄ knowledge_base.py
‚îú‚îÄ‚îÄ engine/
‚îÇ   ‚îú‚îÄ‚îÄ communication_bus.py
‚îÇ   ‚îî‚îÄ‚îÄ fitness_engine.py
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ system_api.py
‚îÇ   ‚îî‚îÄ‚îÄ test_system_api.py
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ logger.py
‚îÇ   ‚îú‚îÄ‚îÄ openai_api.py
‚îÇ   ‚îú‚îÄ‚îÄ test_logger.py
‚îÇ   ‚îî‚îÄ‚îÄ test_openai_api.py
‚îú‚îÄ‚îÄ capabilities/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ data_analysis.py
‚îÇ   ‚îî‚îÄ‚îÄ test_data_analysis.py
‚îú‚îÄ‚îÄ capability_handlers/
‚îÇ   ‚îú‚îÄ‚îÄ communication_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ data_analysis_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ knowledge_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ planning_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ sequence_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ test_data_analysis_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ test_knowledge_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ test_planning_handlers.py
‚îÇ   ‚îî‚îÄ‚îÄ test_sequence_handlers.py
‚îú‚îÄ‚îÄ skills/
‚îÇ   ‚îú‚îÄ‚îÄ api_connector.py
‚îÇ   ‚îú‚îÄ‚îÄ calendar.py
‚îÇ   ‚îú‚îÄ‚îÄ file_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ maths_tool.py
‚îÇ   ‚îú‚îÄ‚îÄ web_scraper.py
‚îÇ   ‚îú‚îÄ‚îÄ weather.py
‚îÇ   ‚îú‚îÄ‚îÄ test_api_connector_skill.py
‚îÇ   ‚îú‚îÄ‚îÄ test_calendar_skill.py
‚îÇ   ‚îú‚îÄ‚îÄ test_file_manager_skill.py
‚îÇ   ‚îú‚îÄ‚îÄ test_maths_tool_skill.py
‚îÇ   ‚îú‚îÄ‚îÄ test_web_scraper_skill.py
‚îÇ   ‚îî‚îÄ‚îÄ test_weather_skill.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ test_agent_base.py
‚îÇ   ‚îú‚îÄ‚îÄ test_agent_rl.py
‚îÇ   ‚îú‚îÄ‚îÄ test_capability_definitions.py
‚îÇ   ‚îú‚îÄ‚îÄ test_capability_executor.py
‚îÇ   ‚îú‚îÄ‚îÄ test_capability_input_preparer.py
‚îÇ   ‚îú‚îÄ‚îÄ test_capability_handlers.py
‚îÇ   ‚îú‚îÄ‚îÄ test_context_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ test_llm_planner.py
‚îÇ   ‚îú‚îÄ‚îÄ test_performance_tracker.py
‚îÇ   ‚îú‚îÄ‚îÄ test_skill_agent.py
‚îÇ   ‚îú‚îÄ‚îÄ test_skill_definitions.py
‚îÇ   ‚îú‚îÄ‚îÄ test_skill_handlers.py
‚îÇ   ‚îî‚îÄ‚îÄ test_task_agent.py
‚îú‚îÄ‚îÄ agent_data/
‚îÇ   ‚îî‚îÄ‚îÄ notes.txt
‚îú‚îÄ‚îÄ agent_outputs/
‚îÇ   ‚îú‚îÄ‚îÄ random_write_5.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_7.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_14.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_23.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_30.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_86.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_172.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_173.txt
‚îÇ   ‚îú‚îÄ‚îÄ random_write_484.txt
‚îÇ   ‚îî‚îÄ‚îÄ sequence_output.txt
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ requirements.txt